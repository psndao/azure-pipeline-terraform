############################
# Resource Group
############################
resource "azurerm_resource_group" "rg" {
  name     = var.resource_group_name
  location = var.location
}

############################
# Storage Account (Data Lake)
############################
resource "azurerm_storage_account" "data_lake" {
  name                     = "pape2025datalake"
  resource_group_name      = azurerm_resource_group.rg.name
  location                 = azurerm_resource_group.rg.location
  account_tier             = "Standard"
  account_replication_type = "LRS"
  is_hns_enabled           = true
}

resource "azurerm_storage_container" "raw_data" {
  name                  = "raw-data"
  storage_account_name  = azurerm_storage_account.data_lake.name
  container_access_type = "private"
}

resource "azurerm_storage_container" "staging" {
  name                  = "staging"
  storage_account_name  = azurerm_storage_account.data_lake.name
  container_access_type = "private"
}

resource "azurerm_storage_container" "transformed" {
  name                  = "transformed"
  storage_account_name  = azurerm_storage_account.data_lake.name
  container_access_type = "private"
}

############################
# Key Vault
############################
data "azurerm_client_config" "current" {}

resource "azurerm_key_vault" "kv" {
  name                = "kv-datapipeline-2025"
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name
  tenant_id           = data.azurerm_client_config.current.tenant_id
  sku_name            = "standard"

  access_policy {
    tenant_id = data.azurerm_client_config.current.tenant_id
    object_id = data.azurerm_client_config.current.object_id

    secret_permissions = [
      "Get", "List", "Set", "Delete", "Recover", "Backup", "Restore", "Purge"
    ]
  }
}

# Weather API Key
resource "azurerm_key_vault_secret" "weather_api_key" {
  name         = "weatherApiKey"
  value        = var.weather_api_key
  key_vault_id = azurerm_key_vault.kv.id
}

# Databricks PAT
resource "azurerm_key_vault_secret" "databricks_pat" {
  name         = "databricksAccessToken"
  value        = var.databricks_pat
  key_vault_id = azurerm_key_vault.kv.id
}

############################
# Azure AD Application (pour Databricks)
############################
data "azuread_client_config" "current" {}
data "azuread_application_published_app_ids" "well_known" {}

resource "azuread_service_principal" "msgraph" {
  client_id    = data.azuread_application_published_app_ids.well_known.result.MicrosoftGraph
  use_existing = true
}

resource "azuread_application" "app" {
  display_name     = "ETL2025DatabricksApp"
  sign_in_audience = "AzureADMyOrg"
  owners           = [data.azuread_client_config.current.object_id]

  required_resource_access {
    resource_app_id = data.azuread_application_published_app_ids.well_known.result.MicrosoftGraph
    resource_access {
      id   = azuread_service_principal.msgraph.oauth2_permission_scope_ids["User.Read"]
      type = "Scope"
    }
  }
}

resource "azuread_service_principal" "app" {
  client_id                    = azuread_application.app.client_id
  app_role_assignment_required = false
  owners                       = [data.azuread_client_config.current.object_id]

  feature_tags { enterprise = true }
}

resource "azuread_application_password" "app" {
  application_id = azuread_application.app.id
  display_name   = "Generated by Terraform"
}

resource "azurerm_key_vault_secret" "app_secret" {
  name         = "App-Secret"
  value        = azuread_application_password.app.value
  key_vault_id = azurerm_key_vault.kv.id
}

############################
# Data Factory + Linked Services
############################
resource "azurerm_data_factory" "adf" {
  name                = "etl2025-datafactory"
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name

  identity { type = "SystemAssigned" }
}

# Linked Service Data Lake
resource "azurerm_data_factory_linked_service_data_lake_storage_gen2" "datalake_ls" {
  name                 = "etl2025-datalake-linkedservice"
  data_factory_id      = azurerm_data_factory.adf.id
  url                  = azurerm_storage_account.data_lake.primary_blob_endpoint
  use_managed_identity = true
}

# Linked Service API Weather
resource "azurerm_data_factory_linked_service_web" "weather_api" {
  name                = "weather-api-linkedservice"
  data_factory_id     = azurerm_data_factory.adf.id
  url                 = "https://api.openweathermap.org/data/2.5"
  authentication_type = "Anonymous"
}

############################
# Databricks
############################
resource "azurerm_databricks_workspace" "databricks" {
  name                = "etl2025-databricks"
  resource_group_name = azurerm_resource_group.rg.name
  location            = azurerm_resource_group.rg.location
  sku                 = "standard"
}

resource "azurerm_data_factory_linked_service_azure_databricks" "databricks_ls" {
  name            = "etl2025-databricks-linkedservice"
  data_factory_id = azurerm_data_factory.adf.id

  adb_domain   = azurerm_databricks_workspace.databricks.workspace_url
  access_token = azurerm_key_vault_secret.databricks_pat.value

  existing_cluster_id = var.databricks_cluster_id
}

############################
# Datasets
############################
# Source : API Weather
resource "azurerm_data_factory_dataset_http" "weatherdataset" {
  name                = "weatherdataset"
  data_factory_id     = azurerm_data_factory.adf.id
  linked_service_name = azurerm_data_factory_linked_service_web.weather_api.name

  relative_url   = "weather?q=Dakar&appid=${azurerm_key_vault_secret.weather_api_key.value}"
  request_method = "GET"
}

# Destination : Data Lake (Raw)
resource "azurerm_data_factory_dataset_binary" "weatherrawdataset" {
  name                = "weatherrawdataset"
  data_factory_id     = azurerm_data_factory.adf.id
  linked_service_name = azurerm_data_factory_linked_service_data_lake_storage_gen2.datalake_ls.name

  azure_blob_storage_location {
    container = azurerm_storage_container.raw_data.name
    path      = "weather/raw/"
  }
}

############################
# Pipeline : API â†’ Data Lake
############################
resource "azurerm_data_factory_pipeline" "weather_pipeline" {
  name            = "weather_ingest_pipeline"
  data_factory_id = azurerm_data_factory.adf.id

  activities_json = <<JSON
[
  {
    "name": "ingest_weather_data",
    "type": "Copy",
    "typeProperties": {
      "source": { "type": "RestSource" },
      "sink":   { "type": "BinarySink" }
    },
    "inputs": [
      { "referenceName": "weatherdataset", "type": "DatasetReference" }
    ],
    "outputs": [
      { "referenceName": "weatherrawdataset", "type": "DatasetReference" }
    ]
  }
]
JSON
}
